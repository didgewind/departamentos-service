Servicio REST con departamentos y empleados en cada departamento. En esta rama tenemos acceso a la bd, 
y recuperamos los empleados de cada departamento cuando se nos piden los departamentos a través del 
servicio de empleados. Cableamos para ello las credenciales profe - profe.

La seguridad en esta rama la implementamos con oauth2. Tenemos un servidor de autenticación
(oauth2) del que el cliente que quiera acceder a este microservicio debe obtener primero el
código de autorización y a continuación el token de acceso. Con este token accede a nuestro
servicio de departamentos. Este servicio consulta el mismo servicio de Autenticación
(oauth2) a través de su url /auth/user (definida en el .yml con la clave 
security.oauth2.resource.userInfoUri=http://localhost:9999/auth/user) para decodificar
el token y obtener un Principal. Sobre ese Principal se aplicarán las políticas
de autorización sobre este microservicio.

Hay que hacer notar que ahora los usuarios, roles y passwords se declaran únicamente en el server
de autenticación. El resto de servicios definen únicamente las autorizaciones en función de roles.

Tenemos dos daos, uno tira de una bd mysql con JdbcTemplate y la otra de mongodb con MongoRepository.

La bd mysql consta de una tabla de departamentos y otra que relaciona empleados con departamentos. 
Para que la bd esté consistente hay que lanzar los scripts de creación de empleados_simple
y de departamentos. Un
empleado puede pertenecer a 0 o varios departamentos. La idea es poder probar transacciones
distribuidas en microservicios eliminando un empleado y fallando al eliminar los registros
de ese empleado en empleados_departamentos.

La bd mongo consta de una colección departamentos con un documento departamentos. Los empleados
de cada departamento están representados en este documento sólo con el cif. La clase de negocio
es la misma para los dos Daos aunque se podría optimizar cuando utilizamos el MongoDAO ya que la
consulta getAllDepartamentos() ya devuelve los departamentos con sus empleados (que sólo tienen
el cif relleno) por lo que nos podríamos ahorrar la llamada a getEmpleadosXDpto(dptoId). Al igual
que con el Dao anterior, lo mejor es partir de una bd limpia para evitar inconsistencias (ejecutar
el script de generación de empleados y de generación de la bd mongo de departamentos).  

Además tenemos un mapeo de /departamentos/hystrix para probar hystrix. Para ello, el método 
getAllDepartamentosConHystrix() del controlador, en vez de devolver
directamente el values() del mapa, va pidiendo al servicio de empleados cada
empleado por separado. El método getEmpleado tiene configurado hystrix para devolver un dummy empleado
en caso de error (se puede probar tirando el servicio de empleados).

Al hystrix dashboard accedemos con la url http://localhost:7777/hystrix/monitor?stream=http://localhost:7777/actuator/hystrix.stream

Se integra con los branch departamentos del cliente web y el checkout Cambiamos Post por Put
del empleados spring-boot

Algo sucede con el launch group que este proyecto no arranca, lo relanzamos y ya está